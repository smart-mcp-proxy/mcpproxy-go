name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            cgo: "0"
            name: mcpproxy-linux-amd64
            archive_format: tar.gz
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            cgo: "0"
            name: mcpproxy-windows-amd64.exe
            archive_format: zip
          - os: macos-latest
            goos: darwin
            goarch: amd64
            cgo: "1"
            name: mcpproxy-darwin-amd64
            archive_format: tar.gz
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cgo: "1"
            name: mcpproxy-darwin-arm64
            archive_format: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.10"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Import Code-Signing Certificates (macOS)
        if: matrix.goos == 'darwin'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWORD }}

      - name: Build binary and create archives
        env:
          CGO_ENABLED: ${{ matrix.cgo }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          LDFLAGS="-s -w -X mcpproxy-go/cmd/mcpproxy.version=${VERSION} -X main.version=${VERSION}"

          # Determine clean binary name
          if [ "${{ matrix.goos }}" = "windows" ]; then
            CLEAN_BINARY="mcpproxy.exe"
          else
            CLEAN_BINARY="mcpproxy"
          fi

          # Create clean binary for archive
          go build -ldflags "${LDFLAGS}" -o ${CLEAN_BINARY} ./cmd/mcpproxy

          # Code sign macOS binaries
          if [ "${{ matrix.goos }}" = "darwin" ]; then
            echo "Code signing macOS binary..."
            codesign --force --options runtime --entitlements scripts/entitlements.plist --sign "${{ secrets.APPLE_TEAM_ID }}" ${CLEAN_BINARY}
            
            # Verify signing
            codesign --verify --verbose ${CLEAN_BINARY}
            echo "Binary signed successfully"
          fi

          # Create archive with version info
          ARCHIVE_BASE="mcpproxy-${VERSION#v}-${{ matrix.goos }}-${{ matrix.goarch }}"
          LATEST_ARCHIVE_BASE="mcpproxy-latest-${{ matrix.goos }}-${{ matrix.goarch }}"

          if [ "${{ matrix.archive_format }}" = "zip" ]; then
            # Create versioned archive
            zip "${ARCHIVE_BASE}.zip" ${CLEAN_BINARY}
            # Create latest archive
            zip "${LATEST_ARCHIVE_BASE}.zip" ${CLEAN_BINARY}
          else
            # Create versioned archive
            tar -czf "${ARCHIVE_BASE}.tar.gz" ${CLEAN_BINARY}
            # Create latest archive  
            tar -czf "${LATEST_ARCHIVE_BASE}.tar.gz" ${CLEAN_BINARY}
          fi

      - name: Create .icns icon (macOS)
        if: matrix.goos == 'darwin'
        run: |
          chmod +x scripts/create-icns.sh
          ./scripts/create-icns.sh

      - name: Create DMG installer (macOS)
        if: matrix.goos == 'darwin'
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          chmod +x scripts/create-dmg.sh

          # Determine binary name
          CLEAN_BINARY="mcpproxy"

          # Create DMG
          ./scripts/create-dmg.sh ${CLEAN_BINARY} ${VERSION} ${{ matrix.goarch }}

          # Sign DMG
          DMG_NAME="mcpproxy-${VERSION#v}-darwin-${{ matrix.goarch }}.dmg"
          echo "Signing DMG: ${DMG_NAME}"
          codesign --force --sign "${{ secrets.APPLE_TEAM_ID }}" "${DMG_NAME}"

          echo "DMG created and signed: ${DMG_NAME}"

      - name: Notarize macOS artifacts
        if: matrix.goos == 'darwin'
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          DMG_NAME="mcpproxy-${VERSION#v}-darwin-${{ matrix.goarch }}.dmg"

          echo "Submitting DMG for notarization..."
          xcrun notarytool submit "${DMG_NAME}" --apple-id "${{ secrets.APPLE_ID_USERNAME }}" --password "${{ secrets.APPLE_ID_APP_PASSWORD }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --wait

          echo "Stapling notarization to DMG..."
          xcrun stapler staple "${DMG_NAME}"

          echo "Verifying notarization..."
          xcrun stapler validate "${DMG_NAME}"

          echo "DMG notarized successfully"

      - name: Upload versioned archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: versioned-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mcpproxy-*-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_format }}

      - name: Upload latest archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mcpproxy-latest-${{ matrix.goos }}-${{ matrix.goarch }}.${{ matrix.archive_format }}

      - name: Upload DMG installer (macOS)
        if: matrix.goos == 'darwin'
        uses: actions/upload-artifact@v4
        with:
          name: dmg-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mcpproxy-*-darwin-${{ matrix.goarch }}.dmg

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Reorganize files
        run: |
          # Create a flat structure to avoid duplicates
          mkdir -p release-files
          find dist -name "*.tar.gz" -o -name "*.zip" -o -name "*.dmg" | while read file; do
            filename=$(basename "$file")
            cp "$file" "release-files/$filename"
          done

      - name: List files for upload
        run: |
          echo "Files to upload:"
          ls -la release-files/

      - name: Create release with binaries
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          body: |
            ## mcpproxy ${{ github.ref_name }}

            Smart MCP Proxy - Intelligent tool discovery and proxying for Model Context Protocol servers.

            ### Download Links

            **Latest Version (auto-updates):**
            - [Linux AMD64](https://github.com/${{ github.repository }}/releases/latest/download/mcpproxy-latest-linux-amd64.tar.gz) 
            - [Windows AMD64](https://github.com/${{ github.repository }}/releases/latest/download/mcpproxy-latest-windows-amd64.zip)
            - [macOS AMD64](https://github.com/${{ github.repository }}/releases/latest/download/mcpproxy-latest-darwin-amd64.tar.gz)
            - [macOS ARM64](https://github.com/${{ github.repository }}/releases/latest/download/mcpproxy-latest-darwin-arm64.tar.gz)

            **macOS Installers (Recommended):**
            - [macOS Universal DMG](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-darwin-arm64.dmg) (Apple Silicon)
            - [macOS Intel DMG](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-darwin-amd64.dmg) (Intel)

            **This Version (${{ github.ref_name }}):**
            - [Linux AMD64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-linux-amd64.tar.gz)
            - [Windows AMD64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-windows-amd64.zip)
            - [macOS AMD64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-darwin-amd64.tar.gz)
            - [macOS ARM64](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/mcpproxy-${{ github.ref_name }}-darwin-arm64.tar.gz)

            ### Installation

            **macOS (Recommended - DMG Installer):**
            1. Download the appropriate DMG file for your Mac (Apple Silicon or Intel)
            2. Double-click the DMG to mount it
            3. Drag mcpproxy.app to Applications folder
            4. Launch from Applications or Launchpad
            5. The app will appear in your system tray with autostart capability

            **Manual Installation (All Platforms):**
            1. Download the appropriate archive for your platform using the links above
            2. Extract the archive: `tar -xzf mcpproxy-*.tar.gz` (Linux/macOS) or unzip (Windows)
            3. Make it executable: `chmod +x mcpproxy` (Linux/macOS)
            4. Run `./mcpproxy` to start

            ### Platform Support

            - **macOS**: Full system tray support with menu and icons
            - **Windows**: Full system tray support with menu and icons  
            - **Linux**: Headless mode only (no system tray due to compatibility)

            ### Usage

            - With tray: `./mcpproxy` (default)
            - Headless: `./mcpproxy --tray=false`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: smart-mcp-proxy/homebrew-mcpproxy
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: tap

      - name: Update Homebrew formula
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Processing version: ${VERSION}"

          cd tap

          # Add debugging and retry logic
          ARCHIVE_URL="https://github.com/${{ github.repository }}/archive/refs/tags/v${VERSION}.tar.gz"
          echo "Downloading from: ${ARCHIVE_URL}"

          # Wait a bit for GitHub to generate the archive
          sleep 10

          # Try downloading with retries
          for i in {1..5}; do
            echo "Download attempt ${i}/5..."
            if wget -q "${ARCHIVE_URL}" -O "v${VERSION}.tar.gz"; then
              echo "Download successful"
              break
            else
              echo "Download failed, retrying in 10 seconds..."
              sleep 10
            fi
            
            if [ $i -eq 5 ]; then
              echo "All download attempts failed"
              echo "Checking if file exists at URL..."
              curl -I "${ARCHIVE_URL}" || true
              exit 1
            fi
          done

          # Verify file was downloaded
          if [ ! -f "v${VERSION}.tar.gz" ]; then
            echo "Archive file not found after download"
            ls -la
            exit 1
          fi

          # Calculate SHA256
          SOURCE_SHA=$(sha256sum "v${VERSION}.tar.gz" | cut -d' ' -f1)
          echo "Calculated SHA256: ${SOURCE_SHA}"

          # Create formula directory
          mkdir -p Formula

          # Create formula file
          printf 'class Mcpproxy < Formula\n  desc "Smart MCP Proxy - Intelligent tool discovery and proxying for Model Context Protocol servers"\n  homepage "https://github.com/smart-mcp-proxy/mcpproxy-go"\n  url "https://github.com/smart-mcp-proxy/mcpproxy-go/archive/refs/tags/v%s.tar.gz"\n  sha256 "%s"\n  license "MIT"\n  head "https://github.com/smart-mcp-proxy/mcpproxy-go.git"\n\n  depends_on "go" => :build\n\n  def install\n    system "go", "build", "-ldflags", "-s -w -X mcpproxy-go/cmd/mcpproxy.version=v%s -X main.version=v%s", "-o", "mcpproxy", "./cmd/mcpproxy"\n    bin.install "mcpproxy"\n  end\n\n  test do\n    assert_match version.to_s, shell_output("#{bin}/mcpproxy --version")\n  end\nend\n' "${VERSION}" "${SOURCE_SHA}" "${VERSION}" "${VERSION}" > Formula/mcpproxy.rb

                    echo "Formula created successfully"
          cat Formula/mcpproxy.rb

          # Clean up
          rm -f *.tar.gz

      - name: Commit and push changes
        run: |
          cd tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/mcpproxy.rb

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update mcpproxy to ${GITHUB_REF#refs/tags/v}"
            git push
            echo "Changes committed and pushed successfully"
          fi
